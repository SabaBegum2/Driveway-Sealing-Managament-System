-- Create Tables

CREATE TABLE ClientDB (
    clientID VARCHAR(20) PRIMARY KEY,
    email VARCHAR(30) NOT NULL UNIQUE,
    password VARCHAR(20) NOT NULL,
    firstName VARCHAR(20) NOT NULL,
    lastName VARCHAR(20) NOT NULL,
    phoneNumber VARCHAR(10),
    creditCardNum VARCHAR(16),
    creditCardCVV VARCHAR(3),
    creditCardExp VARCHAR(5),
    homeAddress VARCHAR(60) NOT NULL,
    registerDate DATETIME,
    loginTime DATETIME,
    activeStatus ENUM("online","offline") DEFAULT "offline"
);

CREATE TABLE QuoteRequest (
    quoteID INT AUTO_INCREMENT,
    clientID VARCHAR(20),
    propertyAddress TEXT NOT NULL,
    drivewaySqft INT,
    proposedPrice DECIMAL(10, 2) NOT NULL,
    addNote VARCHAR(300),
    PRIMARY KEY (quoteID),
    FOREIGN KEY (clientID) REFERENCES ClientDB(clientID)
);

CREATE TABLE QuoteRequestImage (
    quoteID INT,
    image1 VARCHAR(255) NOT NULL,
    image2 VARCHAR(255) NOT NULL,
    image3 VARCHAR(255) NOT NULL,
    image4 VARCHAR(255) NOT NULL,
    image5 VARCHAR(255) NOT NULL,
    FOREIGN KEY (quoteID) REFERENCES QuoteRequest(quoteID)
);

-- -------------- 1. WILL DELETE THIS WHEN WE TEST TOGETHER!!! ----------------------------
-- This is bc I don't have a function to accept in my DB yet, but don't want to go back and forth to do it
-- ----------------- INSERT TRIGGER FOR QUOTEREQUEST TO QUOTEHISTORY : --------------------

DELIMITER //

CREATE TRIGGER addToQuoteHistory
AFTER INSERT ON QuoteRequest
FOR EACH ROW
BEGIN
    INSERT INTO QuoteHistory (clientID, quoteID, proposedPrice, addNote, status)
    VALUES (NEW.clientID, NEW.quoteID, NEW.proposedPrice, NEW.addNote, 'Pending');
END;
//

DELIMITER ;

-- ----------------------------------------------------------------------------------------



-- clientID is already stored in the QuoteRequest table and 
-- can be retrieved through quoteID using a JOIN method to 
-- reduce the amount of data one table needs to hold.

CREATE TABLE QuoteHistory (
    responseID INT AUTO_INCREMENT,
    clientID VARCHAR(20),
    quoteID INT,
    proposedPrice DECIMAL(10, 2),
    startDate DATE,
    endDate DATE,
    addNote VARCHAR(300),
    responseDate DATE DEFAULT CURRENT_DATE,
    status ENUM('Pending', 'Rejected', 'Accepted', 'Cancelled') DEFAULT 'Pending',
    PRIMARY KEY (responseID),
    FOREIGN KEY (quoteID) REFERENCES QuoteRequest(quoteID),
    FOREIGN KEY (clientID) REFERENCES QuoteRequest(clientID)
);


-- ---------------- 2. INSERT TRIGGER FOR QUOTEHISTORY TO WORKORDER: ------------------
DELIMITER //

CREATE TRIGGER createWorkOrder
AFTER UPDATE ON QuoteHistory
FOR EACH ROW
BEGIN
    IF NEW.status = 'Accepted' THEN
        INSERT INTO WorkOrder (clientID, quoteID, responseID, dateRange)
        VALUES (NEW.clientID, NEW.quoteID, NEW.responseID, CONCAT(NEW.startDate, ' to ', NEW.endDate));
    END IF;
END;
//

DELIMITER ;
-- -----------------------------------------------------------------------------------


CREATE TABLE WorkOrder (
    workOrderID INT PRIMARY KEY AUTO_INCREMENT,
    clientID VARCHAR(20),
    quoteID INT,
    responseID INT,
    dateRange VARCHAR(30),
    status ENUM('Scheduled', 'Completed', 'Cancelled') DEFAULT 'Scheduled',
    FOREIGN KEY (clientID) REFERENCES ClientDB(clientID),
    FOREIGN KEY (quoteID) REFERENCES QuoteRequest(quoteID),
    FOREIGN KEY (responseID) REFERENCES QuoteHistory(responseID)
);


-- ---------------- 3. INSERT TRIGGER FOR WORKORDER TO CREATE A NEW INVOICE: ------------------
-- The trigger is named "createInvoice"

DELIMITER //

CREATE TRIGGER `createInvoice` AFTER UPDATE ON `WorkOrder`
FOR EACH ROW
BEGIN
    IF NEW.status = 'Completed' THEN
        INSERT INTO Invoice (workOrderID, clientID, amountDue, dateCreated)
        VALUES (NEW.workOrderID, NEW.clientID, 
                (SELECT qh.proposedPrice 
                 FROM QuoteHistory qh
                 WHERE qh.responseID = NEW.responseID), 
                NOW());
    END IF;
END
//
DELIMITER ;
-- -------------------------------------------------------------------------------------


CREATE TABLE Invoice (
    invoiceID INT PRIMARY KEY AUTO_INCREMENT,
    workOrderID INT,
    clientID VARCHAR(20),
    amountDue DECIMAL(10, 2),
    dateCreated DATETIME,
    datePaid DATETIME DEFAULT NULL,
    FOREIGN KEY (workOrderID) REFERENCES WorkOrder(workOrderID),
    FOREIGN KEY (clientID) REFERENCES ClientDB(clientID)
);

CREATE TABLE InvoiceResponses (
    responseID INT PRIMARY KEY AUTO_INCREMENT,
    invoiceID INT NOT NULL,
    responseNote VARCHAR(500),
    responseDate DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (invoiceID) REFERENCES Invoice(invoiceID)
);




-- For Demonstration: Insert Value Tuples

INSERT INTO ClientDB (clientID, email, password, firstName, lastName, phoneNumber, creditCardNum, creditCardCVV, creditCardExp, homeAddress, registerDate, loginTime, activeStatus) VALUES
    ("C001", "john.doe@example.com", "password123", "John", "Doe", "1234567890", "4111111111111111", "123", "12/25", "123 Main St, Anytown, USA", "2024-11-27 08:00:00", "2024-11-27 08:30:00", "online"),
    ("C002", "jane.smith@example.com", "securePass1", "Jane", "Smith", "0987654321", "5500000000000004", "456", "07/26", "456 Elm St, Othertown, USA", "2024-11-26 09:00:00", "2024-11-27 10:00:00", "offline");

INSERT INTO QuoteRequest (clientID, propertyAddress, drivewaySqft, proposedPrice, addNote) VALUES
    ("C001", "123 Main St, Anytown, USA", 1200, 250.00, "Please prioritize this job as soon as possible."),
    ("C002", "456 Elm St, Othertown, USA", 800, 200.00, "Driveway has some cracks; please inspect closely.");

INSERT INTO QuoteRequestImage (quoteID, image1, image2, image3, image4, image5) VALUES
    (1, "images/driveway1.jpg", "images/driveway2.jpg", "images/driveway3.jpg", "images/driveway4.jpg", "images/driveway5.jpg"),
    (2, "images/drivewayA.jpg", "images/drivewayB.jpg", "images/drivewayC.jpg", "images/drivewayD.jpg", "images/drivewayE.jpg");

INSERT INTO QuoteHistory (clientID, quoteID, proposedPrice, startDate, endDate, addNote, status) VALUES
    ("C001", 1, 275.00, "2024-12-01", "2024-12-03", "Initial counter proposal from David Smith.", "Pending"),
    ("C002", 2, 220.00, "2024-12-05", "2024-12-06", "Proposed time and price by David Smith.", "Pending");

INSERT INTO WorkOrder (clientID, quoteID, responseID, dateRange, status) VALUES
    ("C001", 1, 1, "2024-12-01 to 2024-12-03", "Scheduled"),
    ("C002", 2, 2, "2024-12-05 to 2024-12-06", "Scheduled");

INSERT INTO Invoice (workOrderID, clientID, amountDue, dateCreated, datePaid) VALUES
    (1, "C001", 275.00, "2024-12-04 12:00:00", NULL),
    (2, "C002", 220.00, "2024-12-07 10:00:00", NULL);

INSERT INTO InvoiceResponses (invoiceID, responseNote, responseDate) VALUES
    (1, "The amount seems higher than expected. Can you clarify?", "2024-12-05"),
    (2, "I need an explanation for the additional charges.", "2024-12-08");



-- -------------------- CLIENT SPECIFIC QUERIES --------------------

CREATE VIEW ClientDetails AS
SELECT 
    c.clientID,
    c.email,
    c.firstName,
    c.lastName,
    c.phoneNumber,
    c.homeAddress,
    c.registerDate,
    c.loginTime,
    c.activeStatus,
    
    qr.quoteID,
    qr.propertyAddress,
    qr.drivewaySqft,
    qr.proposedPrice AS requestedPrice,
    qr.addNote AS clientNote,

    qri.image1,
    qri.image2,
    qri.image3,
    qri.image4,
    qri.image5,

    qh.responseID,
    qh.proposedPrice AS responsePrice,
    qh.startDate,
    qh.endDate,
    qh.addNote AS responseNote,
    qh.status AS quoteStatus,
    qh.responseDATE AS responseDate,

    wo.workOrderID,
    wo.dateRange AS workDateRange,
    wo.status AS workStatus,

    i.invoiceID,
    i.amountDue,
    i.dateCreated AS invoiceDateCreated,
    i.datePaid AS invoiceDatePaid,

    ir.responseNote AS invoiceResponseNote,
    ir.responseDate AS invoiceResponseDate

FROM ClientDB c
LEFT JOIN QuoteRequest qr ON c.clientID = qr.clientID
LEFT JOIN QuoteRequestImage qri ON qr.quoteID = qri.quoteID
LEFT JOIN QuoteHistory qh ON qr.quoteID = qh.quoteID
LEFT JOIN WorkOrder wo ON qh.responseID = wo.responseID
LEFT JOIN Invoice i ON wo.workOrderID = i.workOrderID
LEFT JOIN InvoiceResponses ir ON i.invoiceID = ir.invoiceID;

-- Grabs info for quotes
CREATE VIEW QuoteRequestsHistory AS
SELECT 
    quoteID,
    clientID,
    firstName,
    lastName,
    email,

    propertyAddress,
    drivewaySqft,
    requestedPrice AS proposedPrice,
    clientNote,
    image1,
    image2,
    image3,
    image4,
    image5
FROM ClientDetails
WHERE quoteID IS NOT NULL;


-- Grabs info for working orders
CREATE VIEW WorkOrderHistory AS
SELECT 
    wo.workOrderID,
    wo.clientID,
    c.firstName,
    c.lastName,
    c.email,
    qr.quoteID,
    qr.propertyAddress,
    qr.proposedPrice AS originalQuotePrice,
    qh.responseID,
    qh.proposedPrice AS finalQuotePrice,
    qh.startDate,
    qh.endDate,
    qh.status AS quoteStatus,
    wo.dateRange,
    wo.status AS workOrderStatus
FROM WorkOrder wo
LEFT JOIN ClientDB c ON wo.clientID = c.clientID
LEFT JOIN QuoteHistory qh ON wo.responseID = qh.responseID
LEFT JOIN QuoteRequest qr ON wo.quoteID = qr.quoteID
WHERE qh.status = 'Accepted';

-- 
CREATE VIEW InvoiceHistory AS
SELECT 
    i.invoiceID,
    i.workOrderID,
    wo.clientID,
    c.firstName,
    c.lastName,
    c.email,
    c.creditCardNum,
    c.creditCardCVV,
    c.creditCardExp,
    i.amountDue,
    i.dateCreated AS invoiceDate,
    i.datePaid,
    wo.dateRange AS workOrderDateRange,
    wo.status AS workOrderStatus,
    ir.responseNote AS invoiceResponseNote,
    ir.responseDate AS invoiceResponseDate
FROM Invoice i
LEFT JOIN WorkOrder wo ON i.workOrderID = wo.workOrderID
LEFT JOIN ClientDB c ON wo.clientID = c.clientID
LEFT JOIN InvoiceResponses ir ON i.invoiceID = ir.invoiceID
WHERE wo.status = 'Completed';


-- Use JOIN for ClientDB and QuoteRequest:
SELECT c.clientID, c.firstName, c.lastName, qr.propertyAddress, qr.proposedPrice
FROM ClientDB c
JOIN QuoteRequest qr ON c.clientID = qr.clientID;


-- List all QuoteHistory records for a specified client (C001 used here for example):
SELECT qh.responseID, qh.proposedPrice, qh.startDate, qh.endDate, qh.status
FROM QuoteHistory qh
WHERE qh.clientID = "C001";


-- Show unpaid invoices:
SELECT i.invoiceID, i.clientID, i.amountDue, i.dateCreated
FROM Invoice i
WHERE i.datePaid IS NULL;


-- List all invoice responses for a specific invoice:
SELECT ir.responseID, ir.responseNote, ir.responseDate
FROM InvoiceResponses ir
WHERE ir.invoiceID = 1;

-- Update an quote to "Accepted" status:


-- Update a workOrder to "Completed" status:
UPDATE WorkOrder
SET status = 'Completed'
WHERE workOrderID = 1; -- Replace with an existing workOrderID


SELECT 
    qr.quoteID,
    qr.clientID,
    c.firstName,
    c.lastName,
    c.email,
    qr.propertyAddress,
    qr.drivewaySqft,
    qr.proposedPrice AS requestedPrice,
    qr.addNote AS clientNote,
    qri.image1,
    qri.image2,
    qri.image3,
    qri.image4,
    qri.image5
FROM QuoteRequest qr
LEFT JOIN ClientDB c ON qr.clientID = c.clientID
LEFT JOIN QuoteRequestImage qri ON qr.quoteID = qri.quoteID;



----------------------------------------------------------------------


-- for david database 

-- big clients 

SELECT c.clientID, c.firstName, c.lastName, COUNT(wo.workOrderID) AS completed_orders
FROM ClientDB c
JOIN WorkOrder wo ON c.clientID = wo.clientID
WHERE wo.status = 'Completed'
GROUP BY c.clientID
HAVING completed_orders = (
    SELECT MAX(order_count)
    FROM (
        SELECT COUNT(wo2.workOrderID) AS order_count
        FROM WorkOrder wo2
        WHERE wo2.status = 'Completed'
        GROUP BY wo2.clientID
    ) AS subquery
);


-- difficult clients

SELECT c.clientID, c.firstName, c.lastName
FROM ClientDB c
JOIN QuoteRequest qr ON c.clientID = qr.clientID
LEFT JOIN QuoteHistory qh ON qr.quoteID = qh.quoteID
WHERE qh.responseID IS NULL
GROUP BY c.clientID
HAVING COUNT(qr.quoteID) = 3;


-- this months Quotes

SELECT qh.responseID, qh.proposedPrice, qh.startDate, qh.endDate
FROM QuoteHistory qh
WHERE qh.status = 'Accepted'
  AND MONTH(qh.responseDATE) = 12
  AND YEAR(qh.responseDATE) = 2024;


-- prospective clients

SELECT c.clientID, c.firstName, c.lastName
FROM ClientDB c
LEFT JOIN QuoteRequest qr ON c.clientID = qr.clientID
WHERE qr.quoteID IS NULL;


-- largest driveway

SELECT qr.propertyAddress, qr.drivewaySqft
FROM QuoteRequest qr
JOIN WorkOrder wo ON qr.quoteID = wo.quoteID
WHERE wo.status = 'Completed'
  AND qr.drivewaySqft = (
    SELECT MAX(drivewaySqft)
    FROM QuoteRequest qr2
    JOIN WorkOrder wo2 ON qr2.quoteID = wo2.quoteID
    WHERE wo2.status = 'Completed'
  );


-- overdue bills

SELECT i.invoiceID, i.clientID, i.amountDue, i.dateCreated
FROM Invoice i
WHERE i.datePaid IS NULL
  AND DATEDIFF(CURDATE(), i.dateCreated) > 7;


-- bad clients 

SELECT DISTINCT c.clientID, c.firstName, c.lastName
FROM ClientDB c
JOIN Invoice i ON c.clientID = i.clientID
WHERE i.datePaid IS NULL
  AND DATEDIFF(CURDATE(), i.dateCreated) > 7;


-- good clients 

SELECT DISTINCT c.clientID, c.firstName, c.lastName
FROM ClientDB c
JOIN Invoice i ON c.clientID = i.clientID
WHERE i.datePaid IS NOT NULL
  AND TIMESTAMPDIFF(HOUR, i.dateCreated, i.datePaid) <= 24;



