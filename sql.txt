CREATE TABLE ClientDB (
    clientID VARCHAR(20) PRIMARY KEY,
    email VARCHAR(30) NOT NULL UNIQUE,
    password VARCHAR(20) NOT NULL,
    firstName VARCHAR(20) NOT NULL,
    lastName VARCHAR(20) NOT NULL,
    phoneNumber VARCHAR(10),
    creditCardNum VARCHAR(16),
    creditCardCVV VARCHAR(3),
    creditCardExp VARCHAR(5),
    homeAddress VARCHAR(60) NOT NULL,
    registerDate DATETIME,
    loginTime DATETIME,
    activeStatus ENUM("online","offline") DEFAULT "offline"
);

CREATE TABLE QuoteRequest (
    quoteID INT AUTO_INCREMENT,
    clientID VARCHAR(20),
    propertyAddress TEXT NOT NULL,
    drivewaySqft INT,
    proposedPrice DECIMAL(10, 2) NOT NULL,
    addNote VARCHAR(300),
    PRIMARY KEY (quoteID),
    FOREIGN KEY (clientID) REFERENCES ClientDB(clientID)
);

CREATE TABLE QuoteRequestImage (
    quoteID INT,
    image1 VARCHAR(255) NOT NULL,
    image2 VARCHAR(255) NOT NULL,
    image3 VARCHAR(255) NOT NULL,
    image4 VARCHAR(255) NOT NULL,
    image5 VARCHAR(255) NOT NULL,
    FOREIGN KEY (quoteID) REFERENCES QuoteRequest(quoteID)
);


CREATE TRIGGER `addToQuoteHistory` AFTER INSERT ON `QuoteRequest`
 FOR EACH ROW BEGIN
    -- Insert into QuoteHistory only if the quoteID is not already there
    IF NOT EXISTS (
        SELECT 1 
        FROM QuoteHistory 
        WHERE quoteID = NEW.quoteID
    ) THEN
        INSERT INTO QuoteHistory (clientID, quoteID, proposedPrice, addNote, status)
        VALUES (NEW.clientID, NEW.quoteID, NEW.proposedPrice, NEW.addNote, 'Pending');
    END IF;
END


CREATE TABLE QuoteHistory (
    responseID INT AUTO_INCREMENT,
    clientID VARCHAR(20),
    quoteID INT,
    proposedPrice DECIMAL(10, 2),
    startDate DATE,
    endDate DATE,
    addNote VARCHAR(300),
    responseDATE DATE DEFAULT CURRENT_DATE,
    status ENUM('Pending', 'Rejected', 'Accepted', 'Cancelled') DEFAULT 'Pending',
    PRIMARY KEY (responseID),
    FOREIGN KEY (quoteID) REFERENCES QuoteRequest(quoteID),
    FOREIGN KEY (clientID) REFERENCES QuoteRequest(clientID)
);


CREATE TRIGGER `createWorkOrder` AFTER UPDATE ON `QuoteHistory`
FOR EACH ROW
  BEGIN
    IF NEW.status = 'Accepted' THEN
      INSERT INTO WorkOrder( clientID, quoteID, responseID, dateRange)
VALUES(NEW.clientID, NEW.quoteID, NEW.responseID, CONCAT(NEW.startDate, ' to ', NEW.endDate));
    END IF;
END


CREATE TABLE WorkOrder (
    workOrderID INT PRIMARY KEY AUTO_INCREMENT,
    clientID VARCHAR(20),
    quoteID INT,
    responseID INT,
    dateRange VARCHAR(30),
    status ENUM('Scheduled', 'Completed', 'Cancelled') DEFAULT 'Scheduled',
    FOREIGN KEY (clientID) REFERENCES ClientDB(clientID),
    FOREIGN KEY (quoteID) REFERENCES QuoteRequest(quoteID),
    FOREIGN KEY (responseID) REFERENCES QuoteHistory(responseID)
);


-- Optional if only testing Client end: --
CREATE TRIGGER `afterOrderCompleted` AFTER UPDATE ON `WorkOrder`
 FOR EACH ROW BEGIN
    IF NEW.status = 'Completed' THEN
        INSERT INTO Invoice (workOrderID, clientID, amountDue, dateCreated)
        SELECT NEW.workOrderID, NEW.clientID, qh.proposedPrice, NOW()
        FROM QuoteHistory qh
        WHERE qh.responseID = NEW.responseID;
    END IF;
END


CREATE TABLE Invoice (
    invoiceID INT PRIMARY KEY AUTO_INCREMENT,
    workOrderID INT,
    clientID VARCHAR(20),
    amountDue DECIMAL(10, 2),
    dateCreated DATETIME,
    datePaid DATETIME DEFAULT NULL,
    status enum('DUE','OVERDUE','PAID','ADJUSTED') DEFAULT 'DUE',
    discount decimal(10,2) DEFAULT 0.00
    FOREIGN KEY (workOrderID) REFERENCES WorkOrder(workOrderID),
    FOREIGN KEY (clientID) REFERENCES ClientDB(clientID)
);

CREATE TABLE InvoiceResponses (
    responseID INT PRIMARY KEY AUTO_INCREMENT,
    invoiceID INT NOT NULL,
    clientID varchar(20) DEFAULT NULL,
    responseNote VARCHAR(500),
    responseDate DATETIME DEFAULT current_timestamp(),
    FOREIGN KEY (invoiceID) REFERENCES Invoice(invoiceID)
);


-- For Demonstration: Insert Value Tuples

INSERT INTO ClientDB (clientID, email, password, firstName, lastName, phoneNumber, creditCardNum, creditCardCVV, creditCardExp, homeAddress) VALUES
    ("C001", "john.doe@example.com", "password123", "John", "Doe", "1234567890", "4111111111111111", "123", "12/25", "123 Main St, Anytown, USA"),
    ("C002", "jane.smith@example.com", "securePass1", "Jane", "Smith", "0987654321", "5500000000000004", "456", "07/26", "456 Elm St, Othertown, USA");

INSERT INTO ClientDB (clientID, email, password, firstName, lastName, phoneNumber, creditCardNum, creditCardCVV, creditCardExp, homeAddress)
VALUES ('Freddy123', 'Freddy123@example.com', 'securePass123', 'Fred', 'Dimmer', '1234567890', '1234567812345678', '123', '12/26', '123 Main St, Anytown, USA 48222');


INSERT INTO QuoteRequest (clientID, propertyAddress, drivewaySqft, proposedPrice, addNote) VALUES
    ("C001", "123 Main St, Anytown, USA", 1200, 250.00, "Please prioritize this job as soon as possible."),
    ("C002", "456 Elm St, Othertown, USA", 800, 200.00, "Driveway has some cracks; please inspect closely.");


-- (Didn't include images because this is just to validate query for difficult client)
INSERT INTO QuoteRequest (clientID, propertyAddress, drivewaySqft, proposedPrice, addNote)
VALUES 
    ('Freddy123', '456 Oak Lane, Anytown, USA', 1200, 500.00, 'Request for cleaning and sealing'),
    ('Freddy123', '789 Pine Street, Anytown, USA', 900, 400.00, 'Request for repair and resealing'),
    ('Freddy123', '101 Maple Avenue, Anytown, USA', 1500, 700.00, 'Request for new installation');


INSERT INTO QuoteRequestImage (quoteID, image1, image2, image3, image4, image5) VALUES
    (1, "images/driveway1.jpg", "images/driveway2.jpg", "images/driveway3.jpg", "images/driveway4.jpg", "images/driveway5.jpg"),
    (2, "images/drivewayA.jpg", "images/drivewayB.jpg", "images/drivewayC.jpg", "images/drivewayD.jpg", "images/drivewayE.jpg");


INSERT INTO QuoteHistory (clientID, quoteID, proposedPrice, startDate, endDate, addNote, status) VALUES
    ("C001", 1, 275.00, "2024-12-01", "2024-12-03", "Initial counter proposal from David Smith.", "Pending"),
    ("C002", 2, 220.00, "2024-12-05", "2024-12-06", "Proposed time and price by David Smith.", "Pending");

INSERT INTO WorkOrder (clientID, quoteID, responseID, dateRange, status) VALUES
    ("C001", 1, 1, "2024-12-01 to 2024-12-03", "Scheduled"),
    ("C002", 2, 2, "2024-12-05 to 2024-12-06", "Scheduled");

INSERT INTO Invoice (workOrderID, clientID, amountDue, dateCreated, datePaid) VALUES
    (1, "C001", 275.00, "2024-12-04 12:00:00", NULL),
    (2, "C002", 220.00, "2024-12-07 10:00:00", NULL);

INSERT INTO InvoiceResponses (invoiceID, responseNote, responseDate) VALUES
    (1, "The amount seems higher than expected. Can you clarify?", "2024-12-05"),
    (2, "I need an explanation for the additional charges.", "2024-12-08");


----------------------------------------------------------------------
----------------------------------------------------------------------
--------------------			For Both's database		 -------------
----------------------------------------------------------------------
----------------------------------------------------------------------

-- Register new user
     INSERT INTO ClientDB (clientID, email, password, firstName, lastName, phoneNumber, creditCardNum, creditCardCVV, creditCardExp, homeAddress, registerDate, loginTime)
     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Sign in function to search for login credentials
    UPDATE ClientDB SET loginTime = ?, activeStatus = ? WHERE clientID = ? AND password = ?;



----------------------------------------------------------------------
----------------------------------------------------------------------
----------------			For Client's database		 -------------
----------------------------------------------------------------------
----------------------------------------------------------------------

------- CLIENT MAIN PAGE -------

-- CLIENT INFO
     SELECT * FROM ClientDB WHERE clientID LIKE ?

-- Log Client out
     UPDATE ClientDB SET activeStatus = ? WHERE clientID = ?

-- Create quote request
	// Insert into QuoteRequest table
    INSERT INTO QuoteRequest (clientID, propertyAddress, drivewaySqft, proposedPrice, addNote) VALUES (?, ?, ?, ?, ?);
	// Insert images into QuoteRequestImage table
    INSERT INTO QuoteRequestImage (quoteID, image1, image2, image3, image4, image5) VALUES (?, ?, ?, ?, ?, ?);


------- QUOTE HISTORY PAGE -------

-- QUOTE HISTORY
    SELECT 
       QH.responseID,
       QH.quoteID,
       QR.propertyAddress,
       QR.drivewaySqft,
       QH.proposedPrice,
       QH.startDate,
       QH.endDate,
       QH.addNote,
       QH.responseDate,
       QH.status,
       CASE 
	  WHEN QH.responseID = (
	     SELECT MAX(responseID)
	     FROM QuoteHistory
	     WHERE quoteID = QH.quoteID
	  ) AND QH.status = 'Pending'
	  THEN 1
	  ELSE 0
       END AS isMostRecentPending
       FROM QuoteHistory QH
       JOIN QuoteRequest QR ON QH.quoteID = QR.quoteID
       WHERE QH.clientID = ?
       ORDER BY  QH.quoteID, QH.responseID ASC;

-- GET QUOTE RESPONSES FOR CLIENT
	// Grab the proposedPrice, startDate, and endDate if they're NULL in the passed parameters
    SELECT * FROM QuoteHistory WHERE responseID = ?;
	// Return the responseID result and grab missing parameters from client response
    INSERT INTO QuoteHistory (clientID, quoteID, proposedPrice, startDate, endDate, addNote, status) VALUES (?, ?, ?, ?, ?, ?, ?);

-- ACCEPT QOUTE FROM CLIENT
	// Verify responseID was properly grabbed and grab the start and end dates to send back
    SELECT * FROM QuoteHistory WHERE responseID = ?;
	// Update response to Accepted
    UPDATE QuoteHistory 
    SET status = 'Accepted', startDate = ?, endDate = ? 
    WHERE responseID = ?;


------- WORK ORDER HISTORY PAGE -------

-- GET WORK ORDER HISTORY FOR CLIENT
    SELECT 
       WO.workOrderID,
       WO.quoteID,
       WO.clientID,
       QR.propertyAddress,
       WO.dateRange,
       QH.proposedPrice AS price,
       WO.status
    FROM WorkOrder WO
    JOIN QuoteRequest QR ON WO.quoteID = QR.quoteID
    JOIN QuoteHistory QH ON WO.responseID = QH.responseID
    WHERE WO.clientID LIKE ?;

-- WORK ORDER CANCELLED BY CLIENT
    UPDATE WorkOrder SET status = 'CANCELLED' WHERE workOrderID = ?;


------- INVOICE HISTORY PAGE -------

-- GET INVOICE HISTORY FOR CLIENT
	// Make sure OVERDUE was marked before they see their data
    UPDATE Invoice SET status = 'Overdue' WHERE datePaid IS NULL AND DATEDIFF(CURDATE(), dateCreated) > 7;
	// Get invoice history for a client
    SELECT 
         I.status,
          I.invoiceID,
          I.workOrderID,
          I.clientID,
          0 AS responseID, -- Define the initial invoice with responseID = 0
          I.amountDue,
          I.discount,
          I.dateCreated,
          I.datePaid,
          'INITIAL INVOICE' AS responseNote, -- Custom note for the initial invoice
          I.dateCreated AS responseDate, -- Use the invoice creation date for the initial entry
          QR.propertyAddress, -- Include propertyAddress from QuoteRequest
          CASE 
               WHEN (I.status = 'DUE' OR I.status = 'OVERDUE') AND NOT EXISTS (
                  SELECT 1 
                  FROM InvoiceResponses IR2 
                  WHERE IR2.invoiceID = I.invoiceID
               )
               THEN 1
               ELSE 0
            END AS isMostRecentPaid -- For the initial invoice rows
            FROM Invoice I
            LEFT JOIN WorkOrder WO ON I.workOrderID = WO.workOrderID
            LEFT JOIN QuoteHistory QH ON WO.responseID = QH.responseID
            LEFT JOIN QuoteRequest QR ON QH.quoteID = QR.quoteID
            WHERE I.clientID = ?
            
            UNION ALL
            
            SELECT 
               I.status,
               I.invoiceID,
               I.workOrderID,
               I.clientID,
               IR.responseID,
               I.amountDue,
               I.discount,
               I.dateCreated,
               I.datePaid,
               IR.responseNote,
               IR.responseDate,
               QR.propertyAddress, -- Include propertyAddress from QuoteRequest
               CASE 
                  WHEN (I.status = 'DUE' OR I.status = 'OVERDUE') AND IR.responseID = (
                     SELECT MAX(IR2.responseID)
                     FROM InvoiceResponses IR2
                     WHERE IR2.invoiceID = I.invoiceID
                  )
                  THEN 1
                  ELSE 0
               END AS isMostRecentPaid -- For response rows
            FROM Invoice I
            LEFT JOIN InvoiceResponses IR ON I.invoiceID = IR.invoiceID
            LEFT JOIN WorkOrder WO ON I.workOrderID = WO.workOrderID
            LEFT JOIN QuoteHistory QH ON WO.responseID = QH.responseID
            LEFT JOIN QuoteRequest QR ON QH.quoteID = QR.quoteID
            WHERE 
               I.clientID = ?
               AND EXISTS (   -- stops printing duplicates
                   SELECT 1 FROM InvoiceResponses IR2 WHERE IR2.invoiceID = I.invoiceID
               )
            ORDER BY 
            invoiceID ASC, responseID ASC;


-- GET CLIENT'S INVOICE RESPONSES
    INSERT INTO InvoiceResponses (invoiceID, clientID, responseNote) VALUES (?, ?, ?);

-- GET ACCEPTED INVOICE BY CLIENT
    UPDATE Invoice SET status = 'PAID', datePaid = ? WHERE invoiceID = ?;




----------------------------------------------------------------------
----------------------------------------------------------------------
-------			For David's database		 -------------
----------------------------------------------------------------------
----------------------------------------------------------------------

// David's dashboard
  SELECT 
      QR.quoteID,
      QR.clientID,
      QR.propertyAddress,
      QR.drivewaySqft,
      QR.proposedPrice,
      QR.addNote,
      QRI.image1,
      QRI.image2,
      QRI.image3,
      QRI.image4,
      QRI.image5
  FROM 
      QuoteRequest QR
  LEFT JOIN 
      QuoteRequestImage QRI
  ON 
      QR.quoteID = QRI.quoteID;

// Accept Quote
	INSERT INTO QuoteHistory (clientID, quoteID, proposedPrice, startDate, endDate, addNote, status)
	VALUES (?, ?, ?, ?, ?, ?, 'Accepted')

// Get accepted quotes
       SELECT qr.quoteID, qr.clientID, qr.propertyAddress, qr.drivewaySqft, qr.proposedPrice AS originalProposedPrice,
	      qh.startDate, qh.endDate, qh.addNote, qri.image1, qri.image2, qri.image3, qri.image4, qri.image5
       FROM QuoteHistory qh
       JOIN QuoteRequest qr ON qh.quoteID = qr.quoteID
       LEFT JOIN QuoteRequestImage qri ON qr.quoteID = qri.quoteID
       WHERE qh.status = 'Accepted'

// Reject Quote
       UPDATE QuoteHistory
       SET status = 'Rejected', addNote = ?, responseDate = NOW()
       WHERE quoteID = ? AND clientID = ?;

// Get Quote Details
	SELECT qr.*, qri.image1, qri.image2, qri.image3, qri.image4, qri.image5
	FROM QuoteRequest qr
	LEFT JOIN QuoteRequestImage qri ON qr.quoteID = qri.quoteID
	WHERE qr.quoteID = ?;

// Create Work order
       INSERT INTO WorkOrder (clientID, quoteID, responseID, dateRange)
       VALUES (?, ?, ?, ?)

// Check work order 
	SELECT 1 FROM WorkOrder WHERE workOrderID = ? LIMIT 1

// Check Client
	SELECT 1 FROM ClientDB WHERE clientID = ? LIMIT 1

// Generate invoice
       INSERT INTO Invoice (workOrderID, clientID, amountDue, dateCreated)
       VALUES (?, ?, ?, NOW())

// Get all invoice responses
     SELECT ir.responseID, ir.invoiceID, ir.responseNote, ir.responseDate, i.clientID, i.amountDue, qh.quoteID, qh.status
	FROM InvoiceResponses ir
	JOIN Invoice i ON ir.invoiceID = i.invoiceID
	JOIN QuoteHistory qh ON i.workOrderID = qh.quoteID

//for david to respond to the invoices
	note ? `UPDATE InvoiceResponses SET responseNote = ?, responseDate = NOW() WHERE responseID = ?` : `UPDATE InvoiceResponses SET responseDate = NOW() WHERE responseID = ?`

// Update quote history status
       UPDATE QuoteHistory
       SET status = ?, responseDate = NOW(), addNote = ?
       WHERE quoteID = ? AND clientID = ?



-----------------------  SPECIFIC QUERIES   --------------------------

1. [Big Clients]
SELECT 
    clientID, 
    COUNT(workOrderID) AS completedOrders
FROM 
    WorkOrder
WHERE 
    status = 'Completed'
GROUP BY 
    clientID
HAVING 
    COUNT(workOrderID) = (
        SELECT MAX(orderCount)
        FROM (
            SELECT COUNT(workOrderID) AS orderCount
            FROM WorkOrder
            WHERE status = 'Completed'
            GROUP BY clientID
        ) AS subquery
    );


2. [Difficult Clients]
WITH PendingCounts AS (
    SELECT 
        qh.clientID,
        qh.quoteID,
        COUNT(*) AS pendingCount
    FROM QuoteHistory qh
    WHERE qh.status = 'Pending'
    GROUP BY qh.clientID, qh.quoteID
),
ClientsWithThreeOrMoreRequests AS (
    SELECT 
        pc.clientID,
        GROUP_CONCAT(pc.quoteID) AS quoteIDs -- Collect the quoteIDs for the client
    FROM PendingCounts pc
    WHERE pc.pendingCount = 2 -- Exactly 2 'Pending' statuses per quoteID
    GROUP BY pc.clientID
    HAVING COUNT(pc.quoteID) >= 3 -- Check for 3 or more quoteIDs with this pattern
)
SELECT DISTINCT 
    c.clientID,
    c.firstName,
    c.lastName,
    c.email,
    ct.quoteIDs
FROM ClientsWithThreeOrMoreRequests ct
JOIN ClientDB c ON c.clientID = ct.clientID;



3. [This month quotes]
SELECT qh.responseID,
       qh.quoteID,
       qh.clientID,
       qh.proposedPrice,
       qh.startDate,
       qh.endDate,
       qh.addNote,
       qh.status,
       qh.responseDate
FROM QuoteHistory qh
WHERE qh.status = 'Accepted'
  AND MONTH(qh.responseDATE) = MONTH(CURDATE())
  AND YEAR(qh.responseDATE) = YEAR(CURDATE());



4. [Prospective clients]
SELECT c.clientID, 
       c.firstName, 
       c.lastName, 
       c.email, 
       c.registerDate
FROM ClientDB c
WHERE NOT EXISTS (
    SELECT 1
    FROM QuoteRequest q
    WHERE c.clientID = q.clientID
);


5. [Largest driveway]
WITH MaxDriveway AS (
    SELECT MAX(q.drivewaySqft) AS maxSqft
    FROM WorkOrder w
    JOIN QuoteRequest q ON w.quoteID = q.quoteID
)
SELECT w.clientID, 
       w.workOrderID, 
       w.quoteID, 
       q.propertyAddress, 
       q.drivewaySqft, 
       w.dateRange
FROM WorkOrder w
JOIN QuoteRequest q ON w.quoteID = q.quoteID
JOIN MaxDriveway m ON q.drivewaySqft = m.maxSqft;



6. [Overdue bills]
UPDATE Invoice SET status = 'Overdue' 
WHERE datePaid IS NULL AND DATEDIFF(CURDATE(), dateCreated) > 7;

SELECT DISTINCT c.clientID, 
                c.firstName, 
                c.lastName, 
                c.email,
                i.invoiceID,
                i.status
FROM ClientDB c
JOIN Invoice i ON c.clientID = i.clientID
WHERE i.status = 'OVERDUE';



7. [Bad clients]
SELECT DISTINCT c.clientID, 
                c.firstName, 
                c.lastName, 
                c.email,
                i.invoiceID,
                i.dateCreated,
                i.status
FROM ClientDB c
JOIN Invoice i ON c.clientID = i.clientID
WHERE i.datePaid IS NULL 
  AND DATEDIFF(CURDATE(), i.dateCreated) > 7;



8. [Good clients]
SELECT DISTINCT c.clientID, 
                c.firstName, 
                c.lastName, 
                c.email, 
                i.invoiceID, 
                i.dateCreated, 
                i.datePaid
FROM ClientDB c
JOIN Invoice i ON c.clientID = i.clientID
WHERE i.datePaid IS NOT NULL 
  AND TIMESTAMPDIFF(HOUR, i.dateCreated, i.datePaid) <= 24;





